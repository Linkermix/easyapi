package com.example.easyapi;

import jakarta.annotation.PostConstruct;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.jdbc.core.JdbcTemplate;

import java.util.Arrays;

@SpringBootApplication
public class EasyapiApplication {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    public static void main(String[] args) {
        SpringApplication.run(EasyapiApplication.class, args);
    }

    @PostConstruct
    private void initDb() {

        String sqlStatements[] = {
                "drop table if exists product cascade",
                "drop table if exists subgroups cascade",
                "drop table if exists groups cascade",
                "create table groups (id bigint generated by default as identity, name varchar(255) not null, primary key (id))",
                "create table subgroups (id bigint generated by default as identity, name varchar(255) not null, group_id bigint not null, primary key (id))",
                "create table product (id bigint generated by default as identity, amount bigint, name varchar(255) not null, subgroup_id bigint not null,number bigint, price float(53), producer varchar)",
                "alter table if exists groups add constraint UK_8mf0is8024pqmwjxgldfe54l7 unique (name)",
                "alter table if exists product add constraint UK_jmivyxk9rmgysrmsqw15lqr5b unique (name)",
                "alter table if exists subgroups add constraint UK_e6jm7j8nhbudlu5rcel2nxge6 unique (name)",
                "alter table if exists product add constraint FK1y5nxji2gbgey6pg644g9x0w1 foreign key (subgroup_id) references subgroups",
                "alter table if exists subgroups add constraint FKar41a6jolejn8dr9q06mm5axo foreign key (group_id) references groups",
                "insert into groups (name) values('Настольные компьютеры')",
                "insert into groups (name) values('Ноутбуки')",
                "insert into groups (name) values('Мониторы')",
                "insert into groups (name) values('Жесткие диски')",
                "insert into subgroups (name, group_id) values('Десктоп','1')",
                "insert into subgroups (name, group_id) values('Неттоп','1')",
                "insert into subgroups (name, group_id) values('Моноблок','1')",
                "insert into subgroups (name, group_id) values('13 дюймов','2')",
                "insert into subgroups (name, group_id) values('14 дюймов','2')",
                "insert into subgroups (name, group_id) values('15 дюймов','2')",
                "insert into subgroups (name, group_id) values('17 дюймов','2')",
                "insert into subgroups (name, group_id) values('Диагональ 40 см', '3')",
                "insert into subgroups (name, group_id) values('Диагональ 50 см', '3')",
                "insert into subgroups (name, group_id) values('Диагональ 60 см', '3')",
                "insert into subgroups (name, group_id) values('Объем 250гб', '4')",
                "insert into subgroups (name, group_id) values('Объем 500гб', '4')",
                "insert into subgroups (name, group_id) values('Объем 1000гб', '4')",
                "insert into product (amount, name, subgroup_id, number, price, producer) values ('10', 'Seleron', '1', '130130', '50000', 'China')",
                "insert into product (amount, name, subgroup_id, number, price, producer) values ('45', 'Pentium', '2', '130131', '25000', 'USA')",
                "insert into product (amount, name, subgroup_id, number, price, producer) values ('100', 'Raizen', '3', '130132', '50000', 'China')",
                "insert into product (amount, name, subgroup_id, number, price, producer) values ('10', 'Honor', '4', '130133', '50000', 'China')",
                "insert into product (amount, name, subgroup_id, number, price, producer) values ('7', 'Amazon', '5', '130134', '50000', 'USA')",
                "insert into product (amount, name, subgroup_id, number, price, producer) values ('30', 'Huaway', '6', '130135', '50000', 'China')",
        };

        Arrays.asList(sqlStatements).stream().forEach(sql -> {
            System.out.println(sql);
            jdbcTemplate.execute(sql);
        });
    }

}